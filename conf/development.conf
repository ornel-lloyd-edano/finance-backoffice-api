# https://www.playframework.com/documentation/latest/Configuration
include "application.conf"


db.backoffice {
  driver = "org.mariadb.jdbc.Driver"  #"com.mysql.jdbc.Driver"
  # JDBC connection string. "useAffectedRows" must be set to true.
  #url = "jdbc:mysql://localhost:3306/pegb_wallet_db?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  url = "jdbc:mysql://192.168.35.66:3306/wallet?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  #url = "jdbc:mysql://172.30.1.43:3306/temp_pegb_wallet_db?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  url = ${?MYSQL_DATABASE_URL}
  hikaricp {
    # Whether autocommit should be used
    autoCommit = true
    # The connection timeout
    connectionTimeout = 60 seconds
    # The idle timeout
    idleTimeout = 10 minutes
    # The max lifetime of a connection
    maxLifetime = 30 minutes
    # If non null, the query that should be used to test connections
    connectionTestQuery = "SELECT 1"
    # Minimum number of idle connections maintained in the pool.
    minimumIdle = 10
    # The maximum number of connections to make.
    maximumPoolSize = 20
    # If non null, sets the name of the connection pool. Primarily used for stats reporting.
    poolName = "backoffice"
    # A SQL statement that will be executed after every new connection creation before adding it to the pool
    connectionInitSql = "SELECT 1"
    # If non null, sets the transaction isolation level
    transactionIsolation = TRANSACTION_READ_COMMITTED
    # The validation timeout to use
    validationTimeout = 5 seconds
  }
}

// TODO : investigate how to not rely on alphabetical naming of db
db.reports {
  schema = "pegb_wallet_dwh"
  schema = ${?POSTGRES_DATABASE_SCHEMA}
  driver = "org.postgresql.Driver"  #"org.mariadb.jdbc.Driver"  #"com.mysql.jdbc.Driver"
  driver = ${?POSTGRES_DATABASE_DRIVER}
  # JDBC connection string. "useAffectedRows" must be set to true.
  #url = "jdbc:mysql://localhost:3306/pegb_wallet_db?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  #url = "jdbc:mysql://172.30.2.50:3306/pegb_wallet_db_v3?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  url = "jdbc:postgresql://192.168.35.70:5432/dwh?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false"
  url = ${?POSTGRES_DATABASE_URL}

  hikaricp {
    # Whether autocommit should be used
    autoCommit = true
    # The connection timeout
    connectionTimeout = 10 seconds
    # The idle timeout
    idleTimeout = 10 minutes
    # The max lifetime of a connection
    maxLifetime = 30 minutes
    # If non null, the query that should be used to test connections
    connectionTestQuery = "SELECT 1"
    # Minimum number of idle connections maintained in the pool.
    minimumIdle = 10
    # The maximum number of connections to make.
    maximumPoolSize = 20
    # If non null, sets the name of the connection pool. Primarily used for stats reporting.
    poolName = "reports"
    # A SQL statement that will be executed after every new connection creation before adding it to the pool
    connectionInitSql = "SELECT 1"
    # If non null, sets the transaction isolation level
    transactionIsolation = TRANSACTION_READ_COMMITTED
    # The validation timeout to use
    validationTimeout = 5 seconds
  }
}

hosts {
  timeout.seconds = 5 seconds
  url {
    core-wallet = "https://whizmo-dev.pegb.tech:44443"
    core-wallet = ${?CORE_WALLET_HOST}
    vp-wallet = "https://whizmo-vp.pegb.tech:44444"
    vp-wallet = ${?VP_WALLET_HOST}
    #core-wallet-activation = "http://localhost:9000/api/v1/backoffice/applications"
    core-wallet-activation = ${hosts.url.core-wallet}"/api/v1/backoffice/applications"
    core-wallet-activation = ${?CORE_WALLET_ACTIVATION_URL}
    core-fx-activation = ${hosts.url.core-wallet}"/api/v1/backoffice/currency_rates"
    core-fx-activation = ${?CORE_FX_ACTIVATION_URL}
    backoffice-events-notification = ${hosts.url.core-wallet}"/api/v1/backoffice/events"
    backoffice-events-notification = ${?BACKOFFICE_EVENTS_NOTIFICATION_URL}
    core-create-manual-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/settlements/{id}/transactions"
    core-create-manual-transaction = ${?CORE_CREATE_MANUAL_TXN_URL}
    core-create-manual-transaction-fx = ${hosts.url.core-wallet}"/api/v1/backoffice/settlements/{id}/currency_exchanges"
    core-create-manual-transaction-fx = ${?CORE_CREATE_MANUAL_TXN_FX_URL}
    core-deactivate-saving-goals = ${hosts.url.core-wallet}"/api/v1/backoffice/saving_goals/{goal_id}"
    core-deactivate-saving-goals = ${?CORE_DEACTIVATE_SAVING_GOALS}
    core-deactivate-auto-deduct-savings = ${hosts.url.core-wallet}"/api/v1/backoffice/auto_deduct_savings/{goal_id}"
    core-deactivate-auto-deduct-savings = ${?CORE_DEACTIVATE_AUTO_DEDUCT_SAVINGS}
    core-deactivate-roundup-savings = ${hosts.url.core-wallet}"/api/v1/backoffice/roundup_savings/{goal_id}"
    core-deactivate-roundup-savings = ${?CORE_DEACTIVATE_ROUNDUP_SAVINGS}

    core-cancel-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/transactions/{id}/cancel"
    core-cancel-transaction = ${?CORE_CANCEL_TXN_URL}

    core-reverse-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/transactions/{id}/reverse"
    core-reverse-transaction = ${?CORE_REVERSE_TXN_URL}

    core-create-business-user = ${hosts.url.core-wallet}"/api/v1/backoffice/business_users"
    core-create-business-user-verb = ${?CORE_CORE_CREATE_BUSINESS_USER_VERB}

  }
}

couchbase {
  timeout = 30 seconds
  user = "" #""Administrator"
  user = ${?COUCHBASE_USER}
  password = "" #"password"
  password = ${?COUCHBASE_PASSWORD}
  url =  "http://192.168.35.69:8091"  #"http://localhost:8091"
  url = ${?COUCHBASE_URL}
  docs {
    buckets {
      files {
        name = "application_documents"
        name = ${?COUCHBASE_DOCS_BUCKET_NAME}
        password = ""
        password = ${?COUCHBASE_DOCS_BUCKET_PASSWORD}
      }
    }
  }
}

kafka {
  #schema registry not used anymore since AVRO was dumped
  #schema.registry.url = "http://localhost:8081"
  #schema.registry.url = ${?KAFKA_SCHEMA_REGISTRY_URL}
  common {
    bootstrap.servers = "192.168.35.57:9092, 192.168.35.89:9092"
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
  }
  consumer {
  }
  producer {
    db_name = "backoffice_db"   #to be deprecated
    db_version = "1.0.0"   #to be deprecated
    db_version = ${?DB_VERSION}  #to be deprecated

    topic-suffix = "pegb_wallet_db_v3-V4_1_1"
    topic-suffix = ${?KAFKA_TOPIC_NAME_SUFFIX}
  }
  topics {
    core-events = "core-events"
    core-events = ${?KAFKA_TOPIC_CORE_EVENTS}
  }
}


hdfs {
  uri = "hdfs://192.168.35.130:8020"
  uri = ${?HDFS_URI}
  document-path = "/document"
  document-path = ${?HDFS_DOCUMENT_PATH}
  replication = "1"
  replication = ${?HDFS_REPLICATION}
}


maker-checker {
  notification {
    i18n-subject-key="task_notification_subject"
    i18n-subject-key=${?TASK_NOTIFICATION_SUBJECT_I18N_KEY}

    i18n-body-key="task_notification_body"
    i18n-body-key=${?TASK_NOTIFICATION_BODY_I18N_KEY}

    default-subject="A task is waiting for approval"
    default-subject=${?DEFAULT_TASK_NOTIFICATION_SUBJECT}

    default-body="The following task is awaiting your approval: {{ action }} {{ module }}"
    default-body=${?DEFAULT_TASK_NOTIFICATION_BODY}
  }
}