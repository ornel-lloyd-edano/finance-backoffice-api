# https://www.playframework.com/documentation/latest/Configuration
include "application.secret.conf"

play.server.akka.requestTimeout = 75 seconds
play.server.http.idleTimeout = 75 seconds

# This is required in rancher because rancher sends HTTP 1.0 health check requests (empty host headers) but Play 2.6 is Http 1.1 compliant (requires non empty host headers)
play.server.akka.default-host-header = "maybe_rancher"

play.http.errorHandler = "tech.pegb.backoffice.api.CustomErrorHandler"

play.filters {
  // needed to set specific content security policy headers for swagger
  headers.allowActionSpecificHeaders = true
  // couldn't find a way to let swagger work without disabling of it
  disabled += "play.filters.csrf.CSRFFilter"
  hosts {
    allowed = ["."]
  }
  enabled += "play.filters.cors.CORSFilter"
  enabled += "play.filters.gzip.GzipFilter"
  cors {
    pathPrefixes = ["/"]
    preflightMaxAge = 3 days
  }
}

play.modules.enabled += "play.modules.swagger.SwaggerModule"
play.modules.enabled += "tech.pegb.backoffice.application.modules.KafkaModule"  #--deactivate for now, maybe active in application.test.conf
play.modules.enabled += "tech.pegb.backoffice.Module"

play.evolutions {
  enabled = false
  enabled = ${?DATABASE_AUTO_MIGRATIONS_ENABLED} #Because rancher prod/dev env user 'pegb_user' does not have rights to apply DDL scripts
  schema = pegb_wallet_db
  useLocks = true
  autocommit = false
  autoApply=true
}

app {
  host = "http://localhost:9000/api"
  host = ${?APP_HOST}
}

db.backoffice {
  driver = "org.mariadb.jdbc.Driver"  #"com.mysql.jdbc.Driver"
  # JDBC connection string. "useAffectedRows" must be set to true.
  #url = "jdbc:mysql://172.30.2.50:3306/pegb_wallet_db_v3?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false&useAffectedRows=true"
  url = ${?MYSQL_DATABASE_URL}
  hikaricp {
    # Whether autocommit should be used
    autoCommit = true
    # The connection timeout
    connectionTimeout = 60 seconds
    # The idle timeout
    idleTimeout = 10 minutes
    # The max lifetime of a connection
    maxLifetime = 30 minutes
    # If non null, the query that should be used to test connections
    connectionTestQuery = "SELECT 1"
    # Minimum number of idle connections maintained in the pool.
    minimumIdle = 10
    # The maximum number of connections to make.
    maximumPoolSize = 20
    # If non null, sets the name of the connection pool. Primarily used for stats reporting.
    poolName = "backoffice"
    # A SQL statement that will be executed after every new connection creation before adding it to the pool
    connectionInitSql = "SELECT 1"
    # If non null, sets the transaction isolation level
    transactionIsolation = TRANSACTION_READ_COMMITTED
    # The validation timeout to use
    validationTimeout = 5 seconds
  }
}

// TODO : investigate how to not rely on alphabetical naming of db
db.reports {
  schema = ${?POSTGRES_DATABASE_SCHEMA}
  driver = "org.postgresql.Driver"  #"org.mariadb.jdbc.Driver"  #"com.mysql.jdbc.Driver"
  driver = ${?POSTGRES_DATABASE_DRIVER}
  # JDBC connection string. "useAffectedRows" must be set to true.
  #url = "jdbc:postgresql://172.30.1.50:5432/dwh?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false"
  #url = "jdbc:postgresql://192.168.35.70:5432/dwh_test?autoReconnect=true&characterEncoding=utf-8&connectionCollation=utf8_unicode_ci&useSSL=false"
  url = ${?POSTGRES_DATABASE_URL}

  hikaricp {
    # Whether autocommit should be used
    autoCommit = true
    # The connection timeout
    connectionTimeout = 10 seconds
    # The idle timeout
    idleTimeout = 10 minutes
    # The max lifetime of a connection
    maxLifetime = 30 minutes
    # If non null, the query that should be used to test connections
    connectionTestQuery = "SELECT 1"
    # Minimum number of idle connections maintained in the pool.
    minimumIdle = 10
    # The maximum number of connections to make.
    maximumPoolSize = 20
    # If non null, sets the name of the connection pool. Primarily used for stats reporting.
    poolName = "reports"
    # A SQL statement that will be executed after every new connection creation before adding it to the pool
    connectionInitSql = "SELECT 1"
    # If non null, sets the transaction isolation level
    transactionIsolation = TRANSACTION_READ_COMMITTED
    # The validation timeout to use
    validationTimeout = 5 seconds
  }
}

email {
  host = "smtp-relay.gmail.com"
  port = 25
  sender {
    address = "noreply@pegb.tech"
    name = "BackOffice"
  }
  retryTimeout = 1 minute
  maxRetries = 15
}

execution-contexts {
  blocking-io-operations {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 16
      fixed-pool-size = ${?BLOCKING_IO_OPS_THREAD_POOL_SIZE}
    }
    throughput = 1
  }
  generic-operations {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 4
      parallelism-min = ${?GENERIC_OPS_MIN_THREAD_POOL_SIZE}
      # Max number of threads to cap factor-based parallelism number to
      parallelism-factor = 2.0
      parallelism-max = 16
      parallelism-max = ${?GENERIC_OPS_MAX_THREAD_POOL_SIZE}
    }
  }
}

http-header-keys {
  request-id = "request-id"
  request-id = ${?HEADER_KEY_REQUEST_ID}

  request-date = "request-date"
  request-date = ${?HEADER_KEY_REQUEST_DATE}

  request-from = "X-UserName" #Set in backoffice_api auth proxy
  request-from = ${?HEADER_KEY_REQUEST_FROM}

  strict-deserialization = "X-Strict-Deserialization"
  strict-deserialization = ${?HEADER_KEY_STRICT_DESERIALIZATION}

  latest-version = "X-Version"
  latest-version = ${?HEADER_KEY_LATEST_VERSION}

  access-control-expose-headers = ${http-header-keys.latest-version}
  access-control-expose-headers = ${?ACCESS_CONTROL_EXPOSE_HEADERS}

  role-level = "X-RoleLevel"
  role-level = ${?HEADER_KEY_REQUESTER_ROLE_LEVEL}

  business-unit-name = "X-BusinessUnit"
  business-unit-name = ${?HEADER_KEY_REQUESTER_BUSINESS_UNIT}

  api-key = "X-ApiKey"
  api-key = ${?HEADER_KEY_API_KEY}
}

future-timeout = 5 seconds

document {
  expiration = 90 days
  expiration = ${?DOC_FILE_EXPIRY_TIME}
  multipart-form-data {
    doc-key = "docfile"
    doc-key = ${?MULTIPART_FORM_DATA_DOC_KEY}
    json-key = "json"
    json-key = ${?MULTIPART_FORM_DATA_JSON_KEY}
  }
}

hosts {
  timeout.seconds = 15 seconds
  timeout.seconds = ${?REQUEST_TIMEOUT_IN_SECONDS}
  url {
    core-wallet = ${?CORE_WALLET_HOST}
    vp-wallet = ${?VP_WALLET_HOST}
    core-wallet-activation = ${hosts.url.core-wallet}"/api/v1/backoffice/applications"
    core-wallet-activation = ${?CORE_WALLET_ACTIVATION_URL}
    core-wallet-activation-verb = "PATCH"
    core-wallet-activation-verb = ${?CORE_WALLET_ACTIVATION_URL_VERB}
    core-fx-activation = ${hosts.url.core-wallet}"/api/v1/backoffice/currency_rates"
    core-fx-activation = ${?CORE_FX_ACTIVATION_URL}
    core-fx-activation-verb = "PATCH"
    core-fx-activation-verb = ${?CORE_FX_ACTIVATION_URL_VERB}
    backoffice-events-notification = ${hosts.url.core-wallet}"/api/v1/backoffice/events"
    backoffice-events-notification = ${?BACKOFFICE_EVENTS_NOTIFICATION_URL}
    backoffice-events-notification-verb = "POST"
    backoffice-events-notification-verb = ${?BACKOFFICE_EVENTS_NOTIFICATION_URL_VERB}
    core-create-manual-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/settlements/{id}/transactions"
    core-create-manual-transaction = ${?CORE_CREATE_MANUAL_TXN_URL}
    core-create-manual-transaction-fx = ${hosts.url.core-wallet}"/api/v1/backoffice/settlements/{id}/currency_exchanges"
    core-create-manual-transaction-fx = ${?CORE_CREATE_MANUAL_TXN_FX_URL}
    core-create-manual-transaction-verb = "POST"
    core-create-manual-transaction-verb = ${?CORE_CREATE_MANUAL_TXN_URL_VERB}
    core-deactivate-saving-goals = ${hosts.url.core-wallet}"/api/v1/backoffice/saving_goals/{goal_id}"
    core-deactivate-saving-goals = ${?CORE_DEACTIVATE_SAVING_GOALS}
    core-deactivate-saving-goals-verb = "PATCH"
    core-deactivate-saving-goals-verb = ${?CORE_DEACTIVATE_SAVING_GOALS_VERB}
    core-deactivate-auto-deduct-savings = ${hosts.url.core-wallet}"/api/v1/backoffice/auto_deduct_savings/{goal_id}"
    core-deactivate-auto-deduct-savings = ${?CORE_DEACTIVATE_AUTO_DEDUCT_SAVINGS}
    core-deactivate-auto-deduct-savings-verb = "PATCH"
    core-deactivate-auto-deduct-savings-verb = ${?CORE_DEACTIVATE_AUTO_DEDUCT_SAVINGS_VERB}
    core-deactivate-roundup-savings = ${hosts.url.core-wallet}"/api/v1/backoffice/roundup_savings/{goal_id}"
    core-deactivate-roundup-savings = ${?CORE_DEACTIVATE_ROUNDUP_SAVINGS}
    core-deactivate-roundup-savings-verb = "PATCH"
    core-deactivate-roundup-savings-verb = ${?CORE_DEACTIVATE_ROUNDUP_SAVINGS_VERB}

    core-cancel-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/transactions/{id}/cancel"
    core-cancel-transaction = ${?CORE_CANCEL_TXN_URL}
    core-cancel-transaction-verb = "POST"
    core-cancel-transaction-verb = ${?CORE_CANCEL_TXN_URL_VERB}

    core-reverse-transaction = ${hosts.url.core-wallet}"/api/v1/backoffice/transactions/{id}/reverse"
    core-reverse-transaction = ${?CORE_REVERSE_TXN_URL}
    core-reverse-transaction-verb = "POST"
    core-reverse-transaction-verb = ${?CORE_REVERSE_TXN_URL_VERB}

    core-create-business-user = ${hosts.url.core-wallet}"/api/v1/backoffice/business_users"
    core-create-business-user = ${?CORE_CREATE_BUSINESS_USER}
    core-create-business-user-verb = "POST"
    core-create-business-user-verb = ${?CORE_CORE_CREATE_BUSINESS_USER_VERB}

    vp-reset-pin = ${hosts.url.vp-wallet}"/api/backoffice/users/{id}/reset_password"
    vp-reset-pin = ${?VP_RESET_PIN}
    vp-reset-pin-verb = "PATCH"
    vp-reset-pin-verb = ${?VP_RESET_PIN_VERB}

    //backoffice-aggregation = "/api/mock/aggregations"
    backoffice-aggregation = "/api/aggregations"
    backoffice-aggregation = ${?BACKOFFICE_AGGREGATION}
    //backoffice-aggregation-margin = "/api/mock/aggregations/gross_revenue_margin"
    backoffice-aggregation-margin = "/api/aggregations/gross_revenue_margin"
    backoffice-aggregation-margin = ${?BACKOFFICE_AGGREGATION_MARGIN}
  }

  main-backoffice-api = "http://127.0.0.1:9000" #"http://192.168.35.57:8601" //in dev env
  main-backoffice-api = ${?MAIN_BO_HOST}

  backoffice-auth-api = "http://192.168.100.84:9000" //in dev env
  backoffice-auth-api = ${?BO_AUTH_HOST}

  placeholder {
    main-backoffice-api = "$backoffice_api_host"
    main-backoffice-api = ${?MAIN_BO_PLACEHOLDER}
  }
}

dashboardReports{
  cashflowUuid = "cffe9e03-3511-11ea-8cef-fa163ed3b165"
  cashflowUuid = ${?CASHFLOW_REPORT_DEFINITION_UUID}
}

couchbase {
  timeout = 5 seconds
  user = "" #""Administrator"
  user = ${?COUCHBASE_USER}
  password = "" #"password"
  password = ${?COUCHBASE_PASSWORD}
  url = ${?COUCHBASE_URL}
  docs {
    buckets {
      files {
        name = "application_documents"
        name = ${?COUCHBASE_DOCS_BUCKET_NAME}
        password = ""
        password = ${?COUCHBASE_DOCS_BUCKET_PASSWORD}
      }
    }
  }
}

#domain related configs
business-user {

  activated-status = "ACTIVE"
  not-yet-activated-status = "NEW"
  allow-update-status = ""
  email-attribute-name = "EMAIL"
  address-attribute-name = "ADDRESS"
  phone-number-attribute-name = "PHONE_NUMBER"

  registration {

    user-type = ""
    default-subscription = ""
    default-segment = ""
    default-tier = ""
    default-status = ""
    activation-email-template = "Dear #name, Congratulations! You are activated. Your tier is #tier. Your segment is #segment. Your customer type is #type."
    default-business-user-type = ""
    default-account-type = ""
  }

}

user {
  waiting-for-activation-status = "waiting_for_activation"
  active-status = "active"
  passive-status = "passive"

  type {
    business-user = "business_user"
    individual-user = "individual"
  }

  inactive-statuses = "passive"
  inactive-statuses = ${?INACTIVE_STATUSES}
}

account {
  close-status = "close"
  newly-created-status = "active"
  type {
    wallet-account = "standard_wallet"
  }
}

wallet-application {
  status {
    pending = "pending"
    approved = "approved"
    rejected = "rejected"
  }
}

document {
  status {
    approved = "approved"
  }

  type {
    national-id = "national_id"
    selfie = "selfy"
    liveness = "liveness"
  }
}

fee-profile{
  calculation-method{
    flat-fee = "flat_fee"
    flat-percentage = "flat_percentage"
    staircase-with-flat-fees = "staircase_flat_fee"
    staircase-with-flat-percentages = "staircase_flat_percentage"
  }
}

wallet.default-currency = ""


card-application {
  new-application-type = "NEW_APPLICATION"
  default-status = "PENDING"
}

kafka {
  schema.registry.url = ${?KAFKA_SCHEMA_REGISTRY_URL}
  common {
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
  }
  consumer {
  }
  producer {
    db_name = "backoffice_db"   #to be deprecated
    db_version = "1.0.0"   #to be deprecated
    db_version = ${?DB_VERSION}  #to be deprecated

    topic-suffix = "pegb_wallet_db_v3-V4_1_1"
    topic-suffix = ${?KAFKA_TOPIC_NAME_SUFFIX}

    request.timeout.ms = 3000
    request.timeout.ms = ${?KAFKA_PRODUCER_TIMEOUT}

    delivery.timeout.ms = 3000
    delivery.timeout.ms = ${?KAFKA_PRODUCER_TIMEOUT}
  }
  topics {
    core-events = "core-events"
    core-events = ${?KAFKA_TOPIC_CORE_EVENTS}
  }
}


hdfs {
  uri = ${?HDFS_URI}
  document-path = "/document"
  document-path = ${?HDFS_DOCUMENT_PATH}
  replication = "1"
  replication = ${?HDFS_REPLICATION}
}

float.account.numbers.key = "float_account_numbers"
float.account.numbers.key = ${?FLOAT_ACCOUNT_NUMBERS}

remove.from.url = "/activate, /deactivate, /approve, /reject, /close, /cancel, /revert"
remove.from.url = ${?REMOVE_FROM_URL}

pagination.defaultLimit = 25
pagination.defaultLimit = ${?PAGINATION_LIMIT}
pagination.defaultOffset = 0
pagination.defaultOffset = ${?PAGINATION_OFFSET}
pagination.max-cap = 1000
pagination.max-cap = ${?PAGINATION_MAX_CAP}

default {
  locale = "en"
  locale = ${?DEFAULT_LOCALE}
  platform = "web"
  platform = ${?DEFAULT_PLATFORM}
}

mailer {
  enabled = true
  enabled = ${?NOTIFICATION_SENDER_ENABLED}
  host = "smtp-relay.gmail.com"
  host = ${?MAILER_HOST}
  port = 587
  port = ${?MAILER_PORT}
  sender = "backoffice-notifier@pegb.tech"
  sender = ${?NOTIFICATION_SENDER_EMAIL}
}

authentication {
  token-expiration-offset-minutes = 30
  token-expiration-offset-minutes = ${?AUTH_TOKEN_EXPIRATION_MINUTES}
  account-lock-timeout = 30 minutes
  account-lock-timeout = ${?ACCOUNT_LOCK_TIMEOUT}
  require-captcha = false
  require-captcha = ${?REQUIRE_CAPTCHA}
  max-bad-login-attempts = 3
  max-bad-login-attempts = ${?MAX_BAD_LOGIN_ATTEMPTS}
  recaptcha-url = "https://www.google.com/recaptcha/api/siteverify"
  recaptcha-url = ${?RECAPTCHA_URL}
}


maker-checker {
  exempted-modules = "business_user_applications,scopes,permissions,back_office_users,roles,business_units,accounts,business_users,card_applications,cards,currency_exchanges,customers,payment_options,documents,fee_profiles,individual_users,internal_recons,limit_profiles,manual_transactions,spreads,strings,tasks,transactions,types,wallet_applications,reports,report_definitions,routes,notification_templates"
  exempted-modules = ${?MAKER_CHECKER_EXEMPTED_MODULES}

  notification {
    i18n-subject-key=${?TASK_NOTIFICATION_SUBJECT_I18N_KEY}
    i18n-body-key=${?TASK_NOTIFICATION_BODY_I18N_KEY}

    default-subject=${?DEFAULT_TASK_NOTIFICATION_SUBJECT}
    default-body=${?DEFAULT_TASK_NOTIFICATION_BODY}
  }
}

aggregations {
  revenue-step = 1
  revenue-step = ${?AGGREGATIONS_REVENUE_STEP}

  default-num-days-datasource-switch = 0
  default-num-days-datasource-switch = ${?DEFAULT_NUM_DAYS_DATASOURCE_SWITCH_FOR_AGGREGATION}

  float-user-balance-percentage-institution-map-key = "float_user_balance_percentage_institution_map"

  is-on-the-fly = false
  is-on-the-fly = ${?IS_AGGREGATION_ON_THE_FLY}

  future-timeout = 10 seconds
  future-timeout = ${?AGGREGATION_TIMEOUT_IN_SECONDS}

  closing-user-balance-user-type = "individual"
  closing-user-balance-user-type = ${?CLOSING_USER_BALANCE_USER_TYPE}
}

settlements {
  default-fx-recent-count=10
  default-fx-recent-count=${?SETTLEMENT_FX_RECENT_COUNT}
}

date-time-range {
  start-limit-in-days = 180
  start-limit-in-days = ${?START_DATE_LIMIT_IN_DAYS}

  end-limit-in-days = 180
  end-limit-in-days = ${?END_DATE_LIMIT_IN_DAYS}

  start-end-limit-in-days = 360
  start-end-limit-in-days = ${?START_END_DATE_LIMIT_IN_DAYS}
}